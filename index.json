{
	"pages": [
		{"title": "Generate files from JSON LD backend", "text": "\n\nLysis\n\nGenerate files from JSON LD backend\n\nGet started\n\n\n\n\n\n\nGenerate frontend parts from backend\n\nLysis is a tool to generate files from backend&#39;s JSON LD documentation,\nfor example TypeScript classes for Angular, components for React, ...\n\nIt works well with API Platform.\n\n\n\n\n\nExtensible\nAdd generators to your project to add backend-oriented features.\n\n\n\nProject managed\nLysis configuration is included in the project and versioned, ready to be called when the API is updated.\n\n\n\nCreate your own generators\nLysis is based on Handlebars templates. Creating a generator is easy.\n\n\n\nDocumentation\n\nGet started\nCLI parameters\nLysis configuration file\nGenerators\nTroubleshooting\n\nWrite your own generator(s)\n\nCreate a generator\nLysis methods and helpers\nHandlebars\nBuilt-in Handlebars helpers\nGenerator parameters\nUse case\nProject only generator case\n\n", "tags": "", "url": "index.html"},
		{"title": "Lysis CLI", "text": "Lysis CLI\nFor now, the CLI has only one parameter: dry-run.\nOther configuration is done using the yaml configuration file.\nStart Lysis\nTo start Lysis, in the project folder, containing lysis.yml:\nlysis\nEvery APIs in lysis.yml are read, every generators are started and files are written.\nThe dry run parameter\nThe dry-run parameters is mostly useful to test configuration, template and output.\nWhen using it, result is not written in files, it is only displayed in the console.\nlysis --dry-run\nOther parameters\nAs usually with CLI, two administrative parameters are available:\n\n--help: displays help\n--version: displays version\n\n", "tags": "", "url": "cli.html"},
		{"title": "Lysis configuration", "text": "Lysis configuration\nThe configuration file\nLysis configuration is lysis.yml, in your project folder.\nIt follows this scheme:\napis:\n  &lt;api url 1&gt;:\n    &lt;api level parameters&gt;\n    generators:\n      &lt;generator 1&gt;:\n        &lt;generator level parameters&gt;\n      &lt;generator 2&gt;:\n        &lt;...&gt;\n  &lt;api url 1&gt;:\n    &lt;...&gt;\nIt means that:\n\nit is possible to work with many APIs in the same project\nit is possible to work with many generators in the same API\n\nParameters\nAPI level parameters\nFor now, two parameters are available for each API:\n\nbasePath: the base directory where other generators write files. Default value: ``.\nhydraPrefix: the hydra prefix. Default value: hydra:.\n\nGenerator level parameters\nGenerator level parameters are specific to the generator.\nTake a look to the generator documentation for further details.\nExample\napis:\n  http://localhost:8000:\n    basePath: &#39;src/app/backend&#39;\n    hydraPrefix: &#39;hydra:&#39;\n    generators:\n      lysis-typescript-classes-generator:\n        dir: &#39;classes&#39;\n      lysis-restangular-services-generator:\n        dir: &#39;services&#39;\n", "tags": "", "url": "configuration.html"},
		{"title": "Generator parameters", "text": "Generator parameters\nWhen starting a generator, Lysis provides an object as parameter containing:\n\nrawApi: the raw API result, from parseHydraDocumentation.\ncontext: the API result enhanced, ready to use in templates to generate files.\nconfig: the API configuration from the YAML file.\ngeneratorConfig: the generator configuration, still from the YAML file.\n\nContext\nThe context is an object with:\n\nentrypoint: the entrypoint URI, i.e. the API URI\ntitle: the API title\nresources: an object containing the API resources, as (resource name =&gt; resource properties)\n\nResource properties\n\nname: the resource name, for example books\ntitle: the resource title, for example Book\nurl: the resource URL, for example http://127.0.0.1:8000/books\nfields: the resource fields, as (field name =&gt; field properties)\n\nField properties\n\nname: the field name, for example id\ndescription: the field description\ntype: an object containing type properties\nrequired: a boolean\nreadable: a boolean\nwritable: a boolean\n\nType properties\n\ntype:\nscalar:\nrange:\nid:\nresource:\n\nThe type is:\n\ninteger\ndecimal\nstring\nboolean\ndate\ntime\ndateTime\nemail\nurl\nbla bla type...\n\nConfig\nIt is an object containing:\n\nbasePath: the base directory, in which create sub directories and write files\nhydraPrefix: the hydra prefix, mostly used to retrieve field documentation.\n\nGeneratorConfig\nIt is an object, it depends on your generator.\n", "tags": "", "url": "create-a-generator/generator-parameters.html"},
		{"title": "handlebars-helpers", "text": "", "tags": "", "url": "create-a-generator/handlebars-helpers.html"},
		{"title": "Handlebars", "text": "Handlebars\nLysis uses Handlebars as template engine. Take a look to the documentation for further details.\nBuilt-in helpers\nHandlebars provides a lot of helpers, such as if or each.\nLysis provides many more helpers, such as ucc for upper camel case, or jsType to turn JSON LD type into JavaScript type.\nCustom Handlebars helpers\nIt is also possible to define helpers in your generator.\nThe first thing is to import Handlebars from LysisUtils.\nvar handlebars = lysisUtils.getHandlebars();\nThen, write helpers:\nhandlebars.registerHelper(&#39;myHelper&#39;, function(content) {\n  // do some changes\n  return content;\n});\n", "tags": "", "url": "create-a-generator/handlebars.html"},
		{"title": "LysisUtils methods and helpers", "text": "LysisUtils methods and helpers\nOverview\nLysisUtils is a part of Lysis.\nMost of methods required when writing a generator are (or should be) present in LysisUtils.\nImport LysisUtils in your generator\nInclude it in the generator:\nvar lysisUtils = require(&#39;api-lysis&#39;).utils;\nAvailable methods\nThe provided methods:\n\ntoCamelCase(text, whichCase): change text to camel case. The parameter whichCase is upper or lower to enable upper camel case or lower camel case.It is mainly useful when naming generated files from resource name.\nregisterTemplate(id, path): register and compile an Handlebars template as id.\ncreateFile(id, dest, context): create a file from the template designated with id, write it to dest, using the provided context to populate data.\nevalTemplate(id, context) is really similar to createFile, except it only returns the transformed template. This is mostly useful to display a message at the end of the generation.\ncreateDir(dir): create a directory.\nexists(path): check whether a fil or a directory exists.\ngetHandlebars(): returns the Handlebars object.\ngetGeneratorTester(): returns the generator tester instance, to test your generator without creating a fake project. More details below.\n\ncreateFile and createDir only display the result and do not create anything when using the dry-run CLI parameter.\n", "tags": "", "url": "create-a-generator/lysisutils.html"},
		{"title": "Create your own generators", "text": "Create your own generators\nOverview\nA Lysis generator is a directory with:\n\na dependency to the Lysis package, including LysisUtils\nHandlebars templates\na generator class\n\nTable of contents\n\nLysis methods and helpers\nHandlebars\nGenerator parameters\nUse case\n\nBest practices\n\nwrite template result in basePath, or in a subfolder\n\n", "tags": "", "url": "create-a-generator/overview.html"},
		{"title": "Use case", "text": "Use case\nIn this example, we will create the TypeScript classes generator.\nThe aim is to create one class file per REST resource, with typed properties.\npackage.json\nFirstly, create a package.json, as usually, and require Lysis:\nnpm install api-lysis --save\nindex.js\nCreate the core file of the generator: index.js and import utilities:\nvar path = require(&#39;path&#39;);\nvar lysisUtils = require(&#39;api-lysis&#39;).utils;\nvar handlebars = lysisUtils.getHandlebars();\nCreate a new class generator, here tsClassesGenerator:\nvar tsClassesGenerator = function(parameters) {\n\n  var templatePath = path.join(__dirname, &#39;templates&#39;);\n\n  // templates\n  lysisUtils.registerTemplate(&#39;base-class&#39;, path.join(templatePath, &#39;base-class.ts.tpl&#39;));\n  lysisUtils.registerTemplate(&#39;extended-class&#39;, path.join(templatePath, &#39;extended-class.ts.tpl&#39;));\n  lysisUtils.registerTemplate(&#39;index&#39;, path.join(templatePath, &#39;index.ts.tpl&#39;));\n\n  var basePath = path.join(parameters.config.basePath, (parameters.generatorConfig.dir ? parameters.generatorConfig.dir : &#39;backend-classes&#39;));\n\n  lysisUtils.createDir(path.join(basePath, &#39;base&#39;));\n\n  // create resources files from templates\n  for (var resourceName in parameters.context.resources) {\n    var resource = parameters.context.resources[resourceName];\n    var context = { resource: resource };\n    var className = lysisUtils.toCamelCase(resource.title, &#39;upper&#39;);\n\n    lysisUtils.createFile(&#39;base-class&#39;, `${basePath}/base/${className}Base.ts`, context);\n    // if extended-class target files exists, do not overwrite (except when required from config)\n    if (!lysisUtils.exists(`${basePath}/${className}.ts`)) {\n      lysisUtils.createFile(&#39;extended-class&#39;, `${basePath}/${className}.ts`, context);\n    }\n  }\n\n  // create index file\n  lysisUtils.createFile(&#39;index&#39;, `${basePath}/index.ts`, parameters.context);\n};\n\nmodule.exports = tsClassesGenerator;\n\nWhen starting generators, Lysis provides one parameter (here: parameters) containing API resources.\ntemplatePath contains the path of the directory containing templates.\nThree templates are registered and will be used later in the generator.\nThe target directory structure is created.\nFor each resource in provided parameters, create the base class and the inherited empty version of the class. The resource is provided as a context to createFile calls.\nThe index file is created once classes are generated.\n\nFor further details, take a look to the TypeScript classes generator and the index.js file.\nTest the generator\nLysis provides a generator tester to get generator result without creating a frontend application.\nAt the end of index.js, add these lines:\nif (require.main === module) {\n  lysisUtils.getGeneratorTester()\n  .setUrl(&#39;http://127.0.0.1:8000&#39;)\n  .setGenerator(tsClassesGenerator)\n  .test();\n}\nThis code is executed only when index.js is called directly, i.e. not when using the Lysis CLI. In other words, it is executing when starting: node index.js.\nIn test mode, the generator is started in dry run mode: it displays results only and does not created any directories or files.\nTemplates\nThis is an extract of the template generating base classes, templates/base-class.ts.tpl:\n// This file should not be modified, as it can be overwritten by the generator.\n// The &#39;{{ ucc resource.title }}&#39; class is here for customizations and will not be touched.\n\nexport class {{ ucc resource.title }}Base {\n  {{#each resource.fields}}\n  {{#unless writable}}readonly {{/unless}}{{ name }}: {{ jsType type }};\n  {{/each}}\n}\n\nThe class name is the resource.title transformed as upped camel case.\nFor each field of the resouce, readonly is added if the field is not writable, the name is displayed and the type transformed thanks to the jsType helper (e.g. integer is turned into number).\n\n", "tags": "", "url": "create-a-generator/use-case.html"},
		{"title": "List of known generators", "text": "List of known generators\n\nLysis TypeScript classes generator\nLysis Restangular services generator\n\n", "tags": "", "url": "generators.html"},
		{"title": "Get started with Lysis", "text": "Get started with Lysis\nInstall Lysis command\nnpm install api-lysis -g\nNote: this step is optional. If you want to start the CLI without global installation, start ./node_modules/.bin/lysis instead of lysis.\nInstall Lysis in your dev dependencies\nIn your project directory (the one containing package.json):\nnpm install api-lysis --save-dev\nCreate a configuration file\nCreate a file lysis.yml with this content:\napis:\n  http://localhost:8000:\n    basePath: &#39;backend&#39;\n    hydraPrefix: &#39;hydra:&#39;\n    generators:\n      lysis-typescript-classes-generator:\n        dir: &#39;classes&#39;\nWith this file, lysis parses the JSON LD documentation of the REST API at http://localhost:8000 and apply the temlates of the generator lysis-typescript-classes-generator.The result is written in backend/classes.\nInstall generators\nOur configuration file is set to use the generator lysis-typescript-classes-generator. It must be installed, as dev dependency:\nnpm install lysis-typescript-classes-generator --save-dev\nStart Lysis\nDry run mode\nStart the CLI with the dry-run parameter to display generated files result, without writing it:\nlysis --dry-run\nNormal mode\nTo start the CLI, writing results:\nlysis\nMore details\n\nCLI parameters\nLysis configuration file\nGenerators\n\n", "tags": "", "url": "get-started.html"},
		{"title": "Troubleshooting", "text": "Troubleshooting\nResource names are truncated\nIn resources, the first letter of the name are missing. For example, Book name is ook.\nThe cause: the API URL contains the trailing slash, and should not.\nFor example: it should be http://localhost:8000 (and not http://localhost:8000/).\nObject properties type is string\nFor example, with two resources: Book and Review, the property book of the Review class is string, instead of Book.\nThis is maybe due to the book namespace. For now, two kinds of ranges are handled:\n\nhttp://localhost:8000/docs.jsonld#Book, i.e. &lt;something&gt;#Book\nhttp://schema.org/Book, i.e. &lt;something&gt;shema.org/Book\n\nIf the range of your Book does not follow one of these schemes, let us now.\nEntity ids are not present from JSON LD docs\nIf you use API Platform, upgrade to 2.1.\n", "tags": "", "url": "troubleshooting.html"}
	]
}
